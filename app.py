import streamlit as st
import pandas as pd
import joblib

modelo = joblib.load("modelo_decision.pkl")

st.set_page_config(page_title="An√°lise de Candidato", layout="wide")

st.markdown("<h2 style='text-align: center;'>üîç Avalia√ß√£o de Candidatos com IA</h2>", unsafe_allow_html=True)
st.markdown("---")

col1, col2 = st.columns(2)

with col1:
    nivel_academico = st.selectbox("N√≠vel Acad√™mico", ["M√©dio", "T√©cnico", "Tecn√≥logo", "Superior", "P√≥s-gradua√ß√£o", "Mestrado", "Doutorado"])
    ingles = st.selectbox("Ingl√™s", ["Nenhum", "T√©cnico", "Intermedi√°rio", "Avan√ßado", "Fluente"])
    espanhol = st.selectbox("Espanhol", ["Nenhum", "T√©cnico", "Intermedi√°rio", "Avan√ßado", "Fluente"])
    tipo_contratacao = st.selectbox("Tipo de Contrata√ß√£o", ["CLT", "PJ", "Cooperado", "Est√°gio", "Outros"])
    vaga_nivel = st.selectbox("N√≠vel da Vaga", ["J√∫nior", "Pleno", "S√™nior", "Especialista"])

with col2:
    area_atuacao = st.selectbox("√Årea de Atua√ß√£o Profissional", [
        "TI - Desenvolvimento", "Infraestrutura", "Dados", "Gest√£o de Projetos",
        "Seguran√ßa da Informa√ß√£o", "Suporte", "Outros"
    ])
    nivel_prof = st.selectbox("N√≠vel Profissional", ["J√∫nior", "Pleno", "S√™nior", "Especialista"])
    conhecimentos = st.selectbox("Conhecimentos T√©cnicos", [
        "Java", "Python", "SQL", "Cloud", "DevOps", "C#", "SAP", "Sem conhecimento", "Outros"
    ])
    vaga_ingles = st.selectbox("Ingl√™s Exigido na Vaga", ["Nenhum", "T√©cnico", "Intermedi√°rio", "Avan√ßado", "Fluente"])
    vaga_area = st.selectbox("√Årea da Vaga", [
        "TI - Desenvolvimento", "Infraestrutura", "Dados", "Gest√£o de Projetos",
        "Seguran√ßa da Informa√ß√£o", "Suporte", "Outros"
    ])

if st.button("Avaliar Candidato"):
    dados = pd.DataFrame([{
        "formacao_e_idiomas_nivel_academico": nivel_academico,
        "formacao_e_idiomas_nivel_ingles": ingles,
        "formacao_e_idiomas_nivel_espanhol": espanhol,
        "informacoes_profissionais_area_atuacao": area_atuacao,
        "informacoes_profissionais_nivel_profissional": nivel_prof,
        "informacoes_profissionais_conhecimentos_tecnicos": conhecimentos,
        "informacoes_basicas_tipo_contratacao": tipo_contratacao,
        "perfil_vaga_nivel profissional": vaga_nivel,
        "perfil_vaga_nivel_ingles": vaga_ingles,
        "perfil_vaga_areas_atuacao": vaga_area
    }])

    prob = modelo.predict_proba(dados)[0][1]
    ajuste = 0.0

    if nivel_prof in ["Pleno", "S√™nior", "Especialista"] and vaga_nivel in ["J√∫nior", "Pleno"]:
        ajuste += 0.10
    if ingles in ["Avan√ßado", "Fluente"] and vaga_ingles in ["T√©cnico", "Intermedi√°rio", "Avan√ßado"]:
        ajuste += 0.10
    if area_atuacao == vaga_area:
        ajuste += 0.10
    if conhecimentos != "Sem conhecimento":
        ajuste += 0.05
    if nivel_academico in ["Superior", "P√≥s-gradua√ß√£o", "Mestrado", "Doutorado"] and vaga_nivel in ["J√∫nior", "Pleno", "S√™nior"]:
        ajuste += 0.05

    prob_ajustada = min(prob + ajuste, 1.0)
    percentual = round(prob_ajustada * 100, 2)

    st.markdown("---")
    st.markdown("<h3 style='text-align: center;'>üîé Resultado da Avalia√ß√£o</h3>", unsafe_allow_html=True)

    if percentual >= 70:
        cor = "#4CAF50"
        recomendacao = "‚úÖ Excelente candidato! Altamente recomend√°vel."
    elif percentual >= 50:
        cor = "#FFC107"
        recomendacao = "‚ö†Ô∏è Candidato com potencial. Requer an√°lise mais profunda."
    else:
        cor = "#F44336"
        recomendacao = "‚ùå Baixa probabilidade de contrata√ß√£o."

    st.markdown(
        f"""
        <div style='background-color: {cor}; padding: 20px; border-radius: 10px; text-align: center; color: white;'>
            <h2>{percentual}%</h2>
            <p style='font-size: 18px;'>{recomendacao}</p>
        </div>
        """,
        unsafe_allow_html=True
    )
